# -*- coding: utf-8 -*-
"""Proyek Akhir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sri8m0aXIduKepP0acG_1tA57CVGmQsa

import library yang digunakan
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""## Data Understanding

Load dan melihat sekilas isi data
"""

df = pd.read_csv('netflix_titles.csv')
df.head()

"""Melihat info data"""

df.info()

"""## Univariate Data Analysis

Melihat masing-masing jumlah unik data
"""

print('Jumlah Film: ', len(df.title.unique()))
print('Jumlah Sutradara: ', len(df.director.unique()))
print('Jumlah Asal Negara: ', len(df.country.unique()))
print('Jumlah Rate Film: ', len(df.rating.unique()))
print('Jumlah Kategori: ', len(df.listed_in.unique()))

"""Melihat sekilas info dari kolom listed_in"""

df.listed_in.describe()

"""## Data Preparation

Mengecek data yang kosong
"""

df.isnull().sum()

"""Cek jumlah film"""

len(df.show_id.unique())

"""Cek kategori film"""

df.listed_in.unique()

"""Mengecek kategori Film Children & Family Movies, Documentaries"""

df[df['listed_in'] == 'Children & Family Movies, Documentaries']

"""Mengecek kategori Film TV Action & Adventure, TV Dramas"""

df[df['listed_in'] == 'TV Action & Adventure, TV Dramas']

"""Membuat variabel preparation yang berisi dataframe kemudian mengurutkan berdasarkan show_id"""

preparation = df
preparation

"""Membuang data duplikat pada variabel preparation"""

preparation = preparation.drop_duplicates('show_id')
preparation

"""Mengonversi data series ‘show_id’ menjadi dalam bentuk list"""

movie_id = preparation['show_id'].tolist()

"""Mengonversi data series ‘title’ menjadi dalam bentuk list"""

movie_title = preparation['title'].tolist()

"""Mengonversi data series ‘listed_in’ menjadi dalam bentuk list"""

movie_listed_in = preparation['listed_in'].tolist()

"""Melihat jumlah masing-masing list"""

print(len(movie_id))
print(len(movie_title))
print(len(movie_listed_in))

"""Membuat dictionary untuk data ‘movie_id’, ‘movie_title’, dan ‘listed_in’"""

movie_new = pd.DataFrame({
    'id': movie_id,
    'title': movie_title,
    'listed_in': movie_listed_in
})
movie_new

"""## **Model Development**"""

data = movie_new
data.sample(5)

"""Inisialisasi TfidfVectorizer"""

tf = TfidfVectorizer()

"""Melakukan perhitungan idf pada data listed_in"""

tf.fit(data['listed_in'])

"""Mapping array dari fitur index integer ke fitur nama"""

tf.get_feature_names()

"""Melakukan fit lalu ditransformasikan ke bentuk matrix"""

tfidf_matrix = tf.fit_transform(data['listed_in'])

"""Melihat ukuran matrix tfidf"""

tfidf_matrix.shape

"""Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()"""

tfidf_matrix.todense()

"""*   Membuat dataframe untuk melihat tf-idf matrix
*   Kolom diisi dengan kategori film
*   Baris diisi dengan judul film


 
"""

pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=data.title
).sample(22, axis=1).sample(10, axis=0)

"""Menghitung cosine similarity pada matrix tf-idf"""

cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

"""Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa judul film"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['title'], columns=data['title'])
print('Shape:', cosine_sim_df.shape)

"""Melihat similarity matrix pada setiap film"""

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""    Rekomendasi Film berdasarkan kemiripan dataframe
 
    Parameter:
    ---
    title : tipe data string (str)
                Judul film (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan judul film sebagai 
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---
 
 
    Pada index ini, kita mengambil k dengan nilai similarity terbesar 
    pada index matrix yang diberikan (i).
"""

def movie_recommendations(title, similarity_data=cosine_sim_df, items=data[['title', 'listed_in']], k=5):
    
    index = similarity_data.loc[:,title].to_numpy().argpartition(
        range(-1, -k, -1))
    
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    closest = closest.drop(title, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

"""Menghilangkan data yang akan dicari dari rekomendasi"""

data[data.title.eq('Jaguar')]

"""Mendapatkan rekomendasi film yang mirip dengan Jaguar"""

movie_recommendations('Jaguar')